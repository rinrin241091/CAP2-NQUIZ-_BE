const db = require("../config/db");
const bcrypt = require("bcryptjs");
const { sendEmail } = require("../utils/mail");
const { verifyToken, generateToken } = require("../utils/jwt");


const sendOtpRegister = async (email) => {
  try {
    // T·∫°o v√† l∆∞u OTP
    const otp = generateOTP();
    const expiresAt = new Date();
    expiresAt.setMinutes(expiresAt.getMinutes() + 5); // OTP h·∫øt h·∫°n sau 5 ph√∫t

    // X√≥a c√°c OTP c≈© n·∫øu c√≥
    await db.promise().query("DELETE FROM otp WHERE email = ?", [email]);

    // L∆∞u OTP m·ªõi
    await db.promise().query(
      "INSERT INTO otp (email, otp, expires_at) VALUES (?, ?, ?)",
      [email, otp, expiresAt]
    );

    // G·ª≠i OTP
    await sendOTP(email, otp);

    return { message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n" };
  } catch (error) {
    throw new Error(error.message || "L·ªói g·ª≠i OTP");
  }
};

const register = async (userData) => {
  try {
    const hashedPassword = await bcrypt.hash(userData.password, 10);
    const query = "INSERT INTO users (username, email, password) VALUES (?, ?, ?)";
    const values = [userData.username, userData.email, hashedPassword];

    return new Promise((resolve, reject) => {
      db.query(query, values, (err, result) => {
        if (err) {
          console.error("‚ùå DB INSERT ERROR:", err); // üëà log r√µ l·ªói SQL
          reject(err);
        } else {
          resolve(result);
        }
      });
    });
  } catch (error) {
    throw new Error("Kh√¥ng th·ªÉ t·∫°o ng∆∞·ªùi d√πng");
  }
};

const login = async (data) => {
  const { email, password } = data;

  try {
    const queryUser = "SELECT * FROM users WHERE email = ?";
    const [user] = await db.promise().query(queryUser, [email]);

    if (!user || user.length === 0) {
      throw new Error("T√™n ng∆∞·ªùi d√πng ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c");
    }

    const foundUser = user[0]; // L·∫•y ng∆∞·ªùi d√πng ƒë·∫ßu ti√™n t·ª´ k·∫øt qu·∫£ query

    if (!password || !foundUser.password) {
      throw new Error("M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá");
    }

    const isPasswordMatch = await bcrypt.compare(password, foundUser.password);
    if (!isPasswordMatch) {
      throw new Error("T√™n ng∆∞·ªùi d√πng ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c");
    }

    const payload = {
      user_id: foundUser.user_id,
      email: foundUser.email,
      role: foundUser.role
    };
    console.log("Generated Payload:", payload);
    const { accessToken, refreshToken } = await generateToken(payload);

    return {
      accessToken,
      refreshToken,
      user: {
        user_id: foundUser.user_id, 
        email: foundUser.email,
        username: foundUser.username,
        avatar: foundUser.avatar,
        role: foundUser.role,
      },
    };
  } catch (error) {
    console.error("Login error:", error.message);
    throw new Error("ƒê√£ x·∫£y ra l·ªói khi ƒëƒÉng nh·∫≠p. Vui l√≤ng th·ª≠ l·∫°i sau.");
  }
};

const generateOTP = () => {
  const otpCode = Math.floor(100000 + Math.random() * 900000).toString();
  return otpCode;
};

const sendOTP = async (email, otp) => {
  const subject = "ƒê√¢y l√† m√£ OTPcuar b·∫°n.";
  const text = `M√£ OTP c·ªßa b·∫°n l√†: ${otp}. M√£ n√†y c√≥ hi·ªáu l·ª±c trong 5 ph√∫t.`;
  const html = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <h2 style="color: #333;">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>
      <p>M√£ OTP c·ªßa b·∫°n l√†: <strong style="font-size: 24px; color: #007bff;">${otp}</strong></p>
      <p>M√£ n√†y c√≥ hi·ªáu l·ª±c trong 5 ph√∫t.</p>
      <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y.</p>
    </div>
  `;

  try {
    await sendEmail(email, subject, text, html);
    console.log("OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng");
  } catch (error) {
    console.error("L·ªói khi g·ª≠i OTP:", error);
    throw new Error("Kh√¥ng th·ªÉ g·ª≠i OTP. Vui l√≤ng th·ª≠ l·∫°i sau.");
  }
};

const forgotPassword = async (email) => {
  try {
    // Ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng
    const [user] = await db
      .promise()
      .query("SELECT * FROM users WHERE email = ?", [email]);
    if (!user || user.length === 0) {
      throw new Error("Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng");
    }

    // T·∫°o v√† l∆∞u OTP
    const otp = generateOTP();
    const expiresAt = new Date();
    expiresAt.setMinutes(expiresAt.getMinutes() + 5); // OTP h·∫øt h·∫°n sau 5 ph√∫t

    // X√≥a c√°c OTP c≈© c·ªßa email n√†y
    await db.promise().query("DELETE FROM otp WHERE email = ?", [email]);

    // L∆∞u OTP m·ªõi
    await db
      .promise()
      .query("INSERT INTO otp (email, otp, expires_at) VALUES (?, ?, ?)", [
        email,
        otp,
        expiresAt,
      ]);

    // G·ª≠i OTP qua email
    await sendOTP(email, otp);

    return { message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n" };
  } catch (error) {
    throw new Error(error.message);
  }
};

const verifyOTP = async (email, otp) => {
  try {
    // Ki·ªÉm tra OTP
    console.log("üì• verifyOTP input:", email, otp);

    const [otpRecord] = await db
      .promise()
      .query(
        "SELECT * FROM otp WHERE email = ? AND otp = ? AND expires_at > NOW()",
        [email, otp]
      );

    if (!otpRecord || otpRecord.length === 0) {
      throw new Error("OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n");
    }

    return { message: "OTP h·ª£p l·ªá" };
  } catch (error) {
    throw new Error(error.message);
  }
};

const resetPassword = async (email, otp, newPassword) => {
  try {
    // Ki·ªÉm tra OTP
    const [otpRecord] = await db
      .promise()
      .query(
        "SELECT * FROM otp WHERE email = ? AND otp = ? AND expires_at > NOW()",
        [email, otp]
      );

    if (!otpRecord || otpRecord.length === 0) {
      throw new Error("OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n");
    }

    // M√£ OTP h·ª£p l·ªá, ti·∫øp t·ª•c c·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
    const hashedPassword = await bcrypt.hash(newPassword, 10); // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
    const updatePasswordQuery = "UPDATE users SET password = ? WHERE email = ?";
    await db.promise().query(updatePasswordQuery, [hashedPassword, email]);

    // X√≥a OTP sau khi s·ª≠ d·ª•ng
    const deleteOTPQuery = "DELETE FROM otp WHERE email = ?";
    await db.promise().query(deleteOTPQuery, [email]);

    console.log('M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng');
    return 'M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng.';
  } catch (error) {
    throw new Error(error.message);
  }
};

const getUserProfile = async (token) => {
  try {
    // X√°c th·ª±c token v√† gi·∫£i m√£
    const decoded = await verifyToken(token);
    console.log("Decoded: ", decoded);

    // L·∫•y email t·ª´ 'sub'
    const email = decoded.email;
    console.log("Decoded email: ", email);

    // Truy v·∫•n DB v·ªõi email t·ª´ JWT
    const query = "SELECT username, email FROM users WHERE email = ?";
    const [result] = await db.promise().query(query, [email]);

    if (result.length === 0) {
      throw new Error("User not found");
    }

    return result[0];
  } catch (error) {
    throw error;
  }
};

const updateUserProfile = async (token, updateData) => {
  try {
    // X√°c th·ª±c v√† gi·∫£i m√£ token
    const decoded = await verifyToken(token);
    const email = decoded.email;
    console.log("Decoded email: ", email);

    const { username, password } = updateData;

    if (!username && !password) {
      throw new Error("No update data provided");
    }

    if (username && username.length < 3) {
      throw new Error("Username must be at least 3 characters long");
    }

    if (password && password.length < 6) {
      throw new Error("Password must be at least 6 characters long");
    }

    // Ki·ªÉm tra tr√πng username
    if (username) {
      const isUsernameExists = await checkUsernameExists(username, email);
      if (isUsernameExists) {
        throw new Error("Username already exists");
      }
    }

    let query = "UPDATE users SET";
    const values = [];

    if (username) {
      query += " username = ?,";
      values.push(username);
    }

    if (password) {
      const hashedPassword = await bcrypt.hash(password, 10);
      query += " password = ?,";
      values.push(hashedPassword);
    }

    query = query.slice(0, -1); // B·ªè d·∫•u ,
    query += " WHERE email = ?";
    values.push(email);

    const [result] = await db.promise().query(query, values);

    if (result.affectedRows === 0) {
      throw new Error("User not found or no change applied");
    }

    // L·∫•y l·∫°i th√¥ng tin ng∆∞·ªùi d√πng sau khi c·∫≠p nh·∫≠t
    const [updatedUser] = await db
      .promise()
      .query("SELECT username, email FROM users WHERE email = ?", [email]);

    return updatedUser[0];
  } catch (error) {
    throw new Error(error.message || "Error updating user profile");
  }
};

// Admin User Management Services
const getAllUsers = async () => {
  try {
    const query = `
      SELECT 
        user_id,
        username, 
        email, 
        role, 
        DATE_FORMAT(created_at, '%d-%m-%Y') AS created_at 
      FROM users
    `;
    const [users] = await db.promise().query(query);
    return users;
  } catch (error) {
    throw new Error("Error fetching users");
  }
};

const searchUserByUserName = async (username) => {
  try {
    const query = `
      SELECT user_id, username, email, role, DATE_FORMAT(created_at, '%d-%m-%Y') AS created_at
      FROM users
      WHERE username LIKE ?`;
    const [users] = await db.promise().query(query, [`%${username}%`]);
    return users;
  } catch (error) {
    throw new Error("Error searching user");
  }
};

const createUser = async (userData) => {
  try {
    const hashedPassword = await bcrypt.hash(userData.password, 10);

    const query = `
      INSERT INTO users (username, email, password, role)
      VALUES (?, ?, ?, ?)
    `;

    const values = [
      userData.username,
      userData.email,
      hashedPassword,
      userData.role || "user", // fallback n·∫øu kh√¥ng c√≥ role
    ];

    return new Promise((resolve, reject) => {
      db.query(query, values, (err, result) => {
        if (err) {
          console.error("Error inserting user:", err); // ƒë·ªÉ d·ªÖ debug
          reject(err);
        } else {
          resolve(result);
        }
      });
    });
  } catch (error) {
    console.error("Error in register function:", error);
    throw new Error("Kh√¥ng th·ªÉ t·∫°o ng∆∞·ªùi d√πng");
  }
};

const updateUser = async (id, userData) => {
  try {
    const { username, email, role, password } = userData;

    let query = "UPDATE users SET username = ?, email = ?, role = ?";
    const values = [username, email, role];

    if (password) {
      const hashedPassword = await bcrypt.hash(password, 10);
      query += ", password = ?";
      values.push(hashedPassword);
    }

    query += " WHERE user_id = ?";
    values.push(id);

    const [result] = await db.promise().query(query, values);

    if (result.affectedRows === 0) {
      return null;
    }

    return {
      user_id: id,
      username,
      email,
      role,
    };
  } catch (error) {
    throw new Error("Error updating user");
  }
};

const deleteUser = async (id) => {
  try {
    const query = "DELETE FROM users WHERE user_id = ?";
    const [result] = await db.promise().query(query, [id]);
    return result.affectedRows > 0;
  } catch (error) {
    throw new Error("Error deleting user");
  }
};

const checkUsernameExists = async (username, excludeEmail = null) => {
  try {
    let query = "SELECT COUNT(*) as count FROM users WHERE username = ?";
    const values = [username];

    if (excludeEmail) {
      query += " AND email != ?";
      values.push(excludeEmail);
    }

    const [result] = await db.promise().query(query, values);
    return result[0].count > 0;
  } catch (error) {
    throw new Error("Error checking username");
  }
};

module.exports = {
  register,
  login,
  forgotPassword,
  verifyOTP,
  resetPassword,
  getUserProfile,
  getAllUsers,
  searchUserByUserName,
  createUser,
  updateUser,
  deleteUser,
  checkUsernameExists,
  updateUserProfile,
  sendOtpRegister
};
